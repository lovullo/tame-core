<?xml-stylesheet type="text/xsl" href="summary.xsl"?>
<lv:package
  xmlns:lv="http://www.lovullo.com/rater"
  xmlns:c="http://www.lovullo.com/calc"
  xmlns:t="http://www.lovullo.com/rater/apply-template"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.lovullo.com/rater ../../rater.xsd"

  core="true"

  name="core/numeric/minmax"
  desc="Numeric computations dealing with minimums and maximums">

  <lv:import package="../base" />


  <lv:function name="max" desc="Return the greater value">
    <lv:param name="max1" type="float" desc="First value to compare" />
    <lv:param name="max2" type="float" desc="Second value to compare" />

    <c:cases>
      <c:case>
        <c:when name="max1">
          <c:gte>
            <c:value-of name="max2" />
          </c:gte>
        </c:when>

        <c:value-of name="max1" />
      </c:case>

      <c:otherwise>
        <c:value-of name="max2" />
      </c:otherwise>
    </c:cases>
  </lv:function>


  <lv:function name="min" desc="Return the lesser value">
    <lv:param name="min1" type="float" desc="First value to compare" />
    <lv:param name="min2" type="float" desc="Second value to compare" />

    <c:cases>
      <c:case>
        <c:when name="min1">
          <c:lte>
            <c:value-of name="min2" />
          </c:lte>
        </c:when>

        <c:value-of name="min1" />
      </c:case>

      <c:otherwise>
        <c:value-of name="min2" />
      </c:otherwise>
    </c:cases>
  </lv:function>


  <lv:template name="_min-zero_" desc="Does not allow a value below 0 to be yielded">
    <lv:param name="@values@" desc="Calculation to apply restriction to" />
    <lv:param name="@label@" desc="Application label">
      <!-- default empty -->
      <lv:text></lv:text>
    </lv:param>

    <c:apply name="max" label="@label@">
      <c:arg name="max1">
        <c:const value="0" type="integer" desc="Do not allow a value under 0" />
      </c:arg>

      <c:arg name="max2">
        <lv:param-copy name="@values@" />
      </c:arg>
    </c:apply>
  </lv:template>


  <!-- trivial, but cuts turns a verbose rate-each and function application
       into potentially a one-line template application -->
  <lv:template name="_quickMaxEach_" desc="Quick max application">
    <lv:param name="@class@" desc="Class to match on" />
    <lv:param name="@generates@" desc="Value to generate into" />
    <lv:param name="@a@" desc="Value a" />
    <lv:param name="@b@" desc="Value b" />

    <lv:param name="@yields@" desc="Yield variable">
      <lv:text>_</lv:text>
      <lv:param-value name="@generates@" />
    </lv:param>

    <lv:rate-each class="@class@" accumulate="none" yields="@yields@" generates="@generates@" index="k">
      <c:apply name="max">
        <c:arg name="max1">
          <c:value-of name="@a@" index="k" />
        </c:arg>
        <c:arg name="max2">
          <c:value-of name="@b@" index="k" />
        </c:arg>
      </c:apply>
    </lv:rate-each>
  </lv:template>


  <lv:template name="_cap_"
               desc="Cap a value at a given maximum">
    <lv:param name="@values@" desc="Value expression" />
    <lv:param name="@name@"   desc="Value to cap at" />

    <lv:param name="@index@" desc="Index of value to cap at">
      <lv:text></lv:text>
    </lv:param>

    <lv:param name="@value@"
              desc="Constant value to cap at (deprecated)" />

    <lv:param name="@desc@" desc="Value description">
      <lv:text>Maximum value</lv:text>
    </lv:param>

    <c:apply name="min">
      <c:arg name="min1">
        <!-- deprecated -->
        <lv:if name="@value@">
          <c:const value="@value@" type="float" desc="@desc@" />
        </lv:if>
        <lv:unless name="@value@">
          <c:value-of name="@name@"
                      index="@index@"
                      type="float"
                      label="@desc@" />
        </lv:unless>
      </c:arg>

      <c:arg name="min2">
        <lv:param-copy name="@values@" />
      </c:arg>
    </c:apply>
  </lv:template>



  <!-- useful in products -->
  <lv:template name="_min-value-of_" desc="Return a value or a minimum">
    <lv:param name="@name@"  desc="Name of value" />
    <lv:param name="@index@" desc="Value index" />
    <lv:param name="@label@" desc="Optional label" />
    <lv:param name="@min@"   desc="Minimum value" />

    <c:apply name="max" label="{@label@}, minimum of 1">
      <c:arg name="max1">
        <c:const value="@min@" type="float" desc="Minimum value" />
      </c:arg>

      <c:arg name="max2">
        <c:value-of name="@name@" index="@index@" label="@label@" />
      </c:arg>
    </c:apply>
  </lv:template>



  <lv:template name="_between_" desc="Assert that a value is within the given range, inclusive">
    <lv:param name="@min@" desc="Minimum value, inclusive" />
    <lv:param name="@max@" desc="Maximum value, inclusive" />
    <lv:param name="@desc@" desc="Description" />

    <c:gte>
      <c:const value="@min@" type="float" desc="{@desc@}; minimum" />
    </c:gte>
    <c:lte>
      <c:const value="@max@" type="float" desc="{@desc@}; maximum" />
    </c:lte>
  </lv:template>



  <!--
    Performs min and max bumping

    TODO: max is incomplete (should have all the options of min)
   -->
  <lv:template name="_bump_" desc="Bump a value if it does not reach a minimum">
    <!-- if a minimum percentage -->
    <lv:param name="@percent@"   desc="Percent, as a whole value" />
    <lv:param name="@value@"     desc="Value to take percentage of, or take whole value of if no percent" />
    <lv:param name="@vindex@"    desc="Optional index for base" />
    <lv:param name="@name@"      desc="Provided value" />
    <lv:param name="@generates@" desc="Variable to generate into" />
    <lv:param name="@when@"      desc="Conditional bump" />
    <lv:param name="@class@"     desc="Class to match on" />
    <lv:param name="@keep@"      desc="Value of keep flag" />

    <!-- alternative to @name@ -->
    <lv:param name="@const@" desc="Constant value, instead of named" />

    <!-- max values for bumping down -->
    <lv:param name="@maxpercent@" desc="Maximum percent" />


    <lv:rate yields="_{@generates@}" keep="@keep@">
      <c:sum of="@name@" index="k" generates="@generates@" desc="Bumped value">
        <c:cases>
          <!-- if a condition was provided, check it first -->
          <lv:if name="@when@">
            <c:case>
              <c:when name="@when@" index="k">
                <c:eq>
                  <c:value-of name="FALSE" />
                </c:eq>
              </c:when>

              <!-- just return the value provided -->
              <c:value-of name="@name@" index="k" />
            </c:case>
          </lv:if>

          <!-- if a condition was provided, check it first -->
          <lv:if name="@class@">
            <c:case>
              <c:when name="@class@" index="k">
                <c:eq>
                  <c:value-of name="FALSE" />
                </c:eq>
              </c:when>

              <!-- just return the value provided -->
              <c:const value="0" type="float" desc="Zero value" />
            </c:case>
          </lv:if>

          <!-- condition was not provided or did not match (we check for the
               negative of the condition above so that this template will still
               produce valid output event if @when@ is not provided; the
               c:cases will be optimized away in that case) -->
          <c:otherwise>
            <c:let>
              <c:values>
                <c:value name="min" type="float" desc="Minimum">
                  <lv:unless name="@const@">
                    <!-- this will produce a percentage of the provided value, unless no
                         percent was given, in which case the entire value will be used
                         -->
                    <c:product>
                      <!-- if a percent was provided, then take a certain percentage of the value -->
                      <lv:if name="@percent@">
                        <!-- given index or default index? -->
                        <lv:if name="@vindex@">
                          <c:value-of name="@value@" index="@vindex@" />
                        </lv:if>
                        <lv:unless name="@vindex@">
                          <c:value-of name="@value@" index="k" />
                        </lv:unless>

                        <c:quotient label="Percent as real number">
                          <c:const value="@percent@" type="integer" desc="Whole percent" />
                          <c:const value="100" type="integer" desc="Divisor to convert percent to real number" />
                        </c:quotient>
                      </lv:if>

                      <!-- otherwise, use the given value -->
                      <lv:unless name="@percent@">
                        <c:value-of name="@name@" index="k" />
                      </lv:unless>
                    </c:product>
                  </lv:unless>

                  <lv:if name="@const@">
                    <c:const value="@const@" type="float" desc="Constant minimum value" />
                  </lv:if>
                </c:value>
              </c:values>

              <c:let>
                <c:values>
                  <c:value name="minbumped" type="float" desc="Bumped to minimum">
                    <t:maxreduce>
                      <c:value-of name="min" />
                      <c:value-of name="@name@" index="k" />
                    </t:maxreduce>
                  </c:value>

                  <lv:if name="@maxpercent@">
                    <c:value name="max" type="float" desc="Maximum">
                      <c:product>
                        <!-- given index or default index? -->
                        <lv:if name="@vindex@">
                          <c:value-of name="@value@" index="@vindex@" />
                        </lv:if>
                        <lv:unless name="@vindex@">
                          <c:value-of name="@value@" index="k" />
                        </lv:unless>

                        <c:quotient label="Max percent as real number">
                          <c:const value="@maxpercent@" type="integer" desc="Whole max percent" />
                          <c:const value="100" type="integer" desc="Divisor to convert max percent to real number" />
                        </c:quotient>
                      </c:product>
                    </c:value>
                  </lv:if>
                </c:values>

                <c:cases>
                  <!-- if a max percent was provided, then check to ensure it
                       was not exceeded -->
                  <lv:if name="@maxpercent@">
                    <c:case>
                      <c:when name="@name@" index="k">
                        <c:gt>
                          <c:value-of name="max" />
                        </c:gt>
                      </c:when>

                      <c:value-of name="max" />
                    </c:case>
                  </lv:if>

                  <!-- if no max, just yield the bumped value according to the minimum -->
                  <c:otherwise>
                    <c:value-of name="minbumped" />
                  </c:otherwise>
                </c:cases>
              </c:let>
            </c:let>
          </c:otherwise>
        </c:cases>
      </c:sum>
    </lv:rate>
  </lv:template>
</lv:package>
